// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  Customer
  Admin
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String
  emailVerified Boolean
  role          Role      @default(Customer)
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  bookings      Booking[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Car {
  id           String   @id @default(uuid())
  manufacture  String
  model        String
  year         Int
  licensePlate String   @unique
  pricePerDay  Float
  isAvailable  Boolean  @default(true)
  description  String?
  mileage      Int
  imageUrls    String[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relationships
  features   Features @relation(fields: [featuresId], references: [id])
  featuresId String   @unique

  bookings Booking[]
}

// The Features model now holds all static car specifications.
model Features {
  id              String   @id @default(uuid())
  enginePower     Int?
  seatingCapacity Int
  transmission    String
  fuelType        String
  carType         String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  car Car?
}

model Booking {
  id           String   @id @default(uuid())
  fullName     String
  email        String
  startingDate String
  status       String   @default("Pending")
  days         Int
  totalPrice   Float
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relationships
  carId String
  car   Car    @relation(fields: [carId], references: [id], onDelete: Cascade)

  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("booking")
}
